// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package tutorial

import (
	"context"
)

const createUrl = `-- name: CreateUrl :one
INSERT INTO urls (
  original, short
) VALUES (
  ?, ?
)
RETURNING id, short, original
`

type CreateUrlParams struct {
	Original string
	Short    string
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createUrl, arg.Original, arg.Short)
	var i Url
	err := row.Scan(&i.ID, &i.Short, &i.Original)
	return i, err
}

const deleteUrls = `-- name: DeleteUrls :exec
DELETE FROM urls
WHERE id = ?
`

func (q *Queries) DeleteUrls(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUrls, id)
	return err
}

const getUrlById = `-- name: GetUrlById :one
SELECT id, short, original FROM urls
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUrlById(ctx context.Context, id int64) (Url, error) {
	row := q.db.QueryRowContext(ctx, getUrlById, id)
	var i Url
	err := row.Scan(&i.ID, &i.Short, &i.Original)
	return i, err
}

const getUrlByShortUrl = `-- name: GetUrlByShortUrl :one
SELECT id, short, original FROM urls
WHERE short = ? LIMIT 1
`

func (q *Queries) GetUrlByShortUrl(ctx context.Context, short string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getUrlByShortUrl, short)
	var i Url
	err := row.Scan(&i.ID, &i.Short, &i.Original)
	return i, err
}

const listUrls = `-- name: ListUrls :many
SELECT id, short, original FROM urls
ORDER BY original
`

func (q *Queries) ListUrls(ctx context.Context) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, listUrls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(&i.ID, &i.Short, &i.Original); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
